"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/webAssemblyNode.d.ts" preserve="true"/>
const util_1 = require("util");
const worker_threads_1 = require("worker_threads");
const ral_1 = __importDefault(require("../common/ral"));
const _ril = Object.freeze({
    TextEncoder: Object.freeze({
        create(encoding = 'utf-8') {
            return {
                encode(input) {
                    return Buffer.from(input ?? '', encoding);
                }
            };
        }
    }),
    TextDecoder: Object.freeze({
        create(encoding = 'utf-8') {
            return new util_1.TextDecoder(encoding);
        }
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setImmediate(callback, ...args);
            return { dispose: () => clearImmediate(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        }
    }),
    Connection: Object.freeze({
        async createWorker(port, world, timeout) {
            if (port === undefined) {
                port = worker_threads_1.parentPort;
            }
            if (!(port instanceof MessagePort)) {
                throw new Error(`Expected MessagePort`);
            }
            const connection = await import('./connection.js');
            return new connection.WorkerConnection(port, world, timeout);
        },
        async createMain(port) {
            if (!(port instanceof MessagePort) && !(port instanceof worker_threads_1.Worker)) {
                throw new Error(`Expected MessagePort or Worker`);
            }
            const connection = await import('./connection.js');
            return new connection.MainConnection(port);
        }
    }),
    Worker: Object.freeze({
        getPort() {
            return worker_threads_1.parentPort;
        },
        getArgs() {
            return process.argv.slice(2);
        },
        get exitCode() {
            return process.exitCode;
        },
        set exitCode(value) {
            process.exitCode = value;
        }
    }),
    WebAssembly: Object.freeze({
        compile(bytes) {
            return WebAssembly.compile(bytes);
        },
        instantiate(module, imports) {
            return WebAssembly.instantiate(module, imports);
        }
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        if (!ral_1.default.isInstalled()) {
            ral_1.default.install(_ril);
        }
    }
    RIL.install = install;
})(RIL || (RIL = {}));
if (!ral_1.default.isInstalled()) {
    ral_1.default.install(_ril);
}
exports.default = RIL;
