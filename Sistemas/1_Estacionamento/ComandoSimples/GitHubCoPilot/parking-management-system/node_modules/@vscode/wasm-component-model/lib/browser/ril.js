"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ral_1 = __importDefault(require("../common/ral"));
const connection = __importStar(require("./connection"));
// In Browser environments we can only encode / decode utf-8
const encoder = new TextEncoder();
const decoder = new TextDecoder();
const _ril = Object.freeze({
    TextEncoder: Object.freeze({
        create(_encoding = 'utf-8') {
            return encoder;
        }
    }),
    TextDecoder: Object.freeze({
        create(_encoding = 'utf-8') {
            return {
                decode(input) {
                    if (input === undefined) {
                        return decoder.decode(input);
                    }
                    else {
                        if (input.buffer instanceof SharedArrayBuffer) {
                            return decoder.decode(input.slice(0));
                        }
                        else {
                            return decoder.decode(input);
                        }
                    }
                }
            };
        }
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setTimeout(callback, 0, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        },
    }),
    Connection: Object.freeze({
        async createWorker(port, world, timeout) {
            if (port === undefined) {
                port = self;
            }
            if (!(port instanceof MessagePort) && !(port instanceof DedicatedWorkerGlobalScope)) {
                throw new Error(`Expected MessagePort or DedicatedWorkerGlobalScope`);
            }
            return new connection.WorkerConnection(port, world, timeout);
        },
        async createMain(port) {
            if (!(port instanceof MessagePort) && !(port instanceof Worker)) {
                throw new Error(`Expected MessagePort or Worker`);
            }
            return new connection.MainConnection(port);
        }
    }),
    Worker: Object.freeze({
        getPort() {
            return self;
        },
        getArgs() {
            return [];
        },
        get exitCode() {
            return 0;
        },
        set exitCode(_value) {
        }
    }),
    WebAssembly: Object.freeze({
        compile(bytes) {
            return WebAssembly.compile(bytes);
        },
        instantiate(module, imports) {
            return WebAssembly.instantiate(module, imports);
        }
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        if (!ral_1.default.isInstalled()) {
            ral_1.default.install(_ril);
        }
    }
    RIL.install = install;
})(RIL || (RIL = {}));
if (!ral_1.default.isInstalled()) {
    ral_1.default.install(_ril);
}
exports.default = RIL;
